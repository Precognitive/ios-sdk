#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.3.2 (swiftlang-1200.0.45 clang-1200.0.32.28)
#ifndef COGNITIONSDK_SWIFT_H
#define COGNITIONSDK_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import ObjectiveC;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="CognitionSDK",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

enum CognitionDataGroup : NSInteger;
@class CMDeviceMotion;
@class CMAccelerometerData;
@class CMGyroData;
@class CMMagnetometerData;
enum CognitionLogLevel : NSInteger;
@class CLLocation;
@class CLHeading;
@class CLVisit;
@class UIViewController;
@class UITextField;

/// This class represents the SDK, use <code>Cognition.shared</code> to get a reference
SWIFT_CLASS("_TtC12CognitionSDK9Cognition")
@interface Cognition : NSObject
/// Returns a shared reference the CognitionSDK
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) Cognition * _Nonnull shared;)
+ (Cognition * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// Returns the session id
@property (nonatomic, readonly, copy) NSString * _Nonnull sessionId;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// Starts the SDK
///
/// returns:
/// true if the SDK started successfully
- (BOOL)start SWIFT_WARN_UNUSED_RESULT;
/// Stops the SDK
- (void)stop;
/// Resets the sessionId that is generated by the SDK. This should be used if a user logs out of the app
- (void)resetSession;
/// Used to automatically run all monitoring and submits all collected data, this should be used before submitting login/transaction/open to your own servers
/// \param callback a callback execute once analyze is complete
///
- (void)analyze:(void (^ _Nonnull)(void))callback;
/// Sets the API Key
/// \param apiKey An API key to use
///
- (void)setApiKey:(NSString * _Nonnull)apiKey;
/// Updates the eventId at any given time to meet your logical requirements
/// \param eventId the eventId to set
///
- (void)setEventId:(NSString * _Nonnull)eventId;
/// Updates the user id, such as after the user has logged in
/// \param userId the user id to set
///
- (void)setUserId:(NSString * _Nonnull)userId;
/// Updates the device url
/// \param url the url to set
///
- (void)setDeviceUrl:(NSString * _Nonnull)url;
/// Updates the behavior URL
/// \param url the url to update
///
- (void)setBehaviorUrl:(NSString * _Nonnull)url;
/// Returns the flush frequency
///
/// returns:
/// how frequently data is flushed
- (NSTimeInterval)getRequestInterval SWIFT_WARN_UNUSED_RESULT;
/// Sets how frequently data should be flushed to server
/// \param interval the time interval for the flush
///
- (void)setRequestInterval:(NSTimeInterval)interval;
/// Adds a data group to the enabled set. This should be called before <code>start()</code>
/// \param dataGroup the data group to enabled
///
- (void)includeDataGroupWithDataGroup:(enum CognitionDataGroup)dataGroup;
/// Removes a data group to the enabled set. This should be called before <code>start()</code>
/// \param dataGroup the data group to remove
///
- (void)excludeDataGroupWithDataGroup:(enum CognitionDataGroup)dataGroup;
/// Enables or disables debug mode
/// \param enabled When true, additional information is generated in the request body for debugging purposes. Defaults to false
///
- (void)enableDebugModeWithEnabled:(BOOL)enabled;
/// Manually enable or disable the altimeter.
/// \param enabled true if the altimer is enabled
///
- (void)enableAltimeterWithEnabled:(BOOL)enabled;
/// Returns the current accelerometer update interval (defaults to 5 seconds)
///
/// returns:
/// the interval
- (NSTimeInterval)getAcclerometerUpdateInterval SWIFT_WARN_UNUSED_RESULT;
/// Changes the accelerometer update interval. Set this before calling <code>start()</code>
/// \param interval the interval to set
///
- (void)setAccelerometerUpdateInterval:(NSTimeInterval)interval;
/// Returns the current gyro update interval (defaults to 5 seconds)
///
/// returns:
/// the interval
- (NSTimeInterval)getGyroUpdateInterval SWIFT_WARN_UNUSED_RESULT;
/// Changes the gyroscope update interval. Set this before calling <code>start()</code>
/// \param interval the interval to set
///
- (void)setGyroUpdateInterval:(NSTimeInterval)interval;
/// Returns the current magnetometer update interval (defaults to 5 seconds)
///
/// returns:
/// the interval
- (NSTimeInterval)getMagnetometerUpdateInterval SWIFT_WARN_UNUSED_RESULT;
/// Changes the magnetometer update interval. Set this before calling <code>start()</code>
///
/// returns:
/// the interval to set
- (void)setMagnetometerUpdateInterval:(NSTimeInterval)interval;
/// Returns the current device motion update interval (defaults to 5 seconds)
///
/// returns:
/// the interval
- (NSTimeInterval)getDeviceMotionUpdateInterval SWIFT_WARN_UNUSED_RESULT;
/// Changes the device motion update interval. Set this before calling <code>start()</code>
/// \param interval the interval to set
///
- (void)setDeviceMotionUpdateInterval:(NSTimeInterval)interval;
/// Manually enables or disables the motion manager
/// \param enabled if true, then enabled
///
- (void)enableMotionWithEnabled:(BOOL)enabled;
/// Allows for the client to provide motion information
/// \param enabled if true, the client may provide informarion
///
- (void)enableCustomMotionWithEnabled:(BOOL)enabled;
/// Adds customs motion information, <code>enableMotion(enabled: true)</code> must be called before providing data
/// \param data the motion data to add
///
- (void)addDeviceMotionData:(CMDeviceMotion * _Nonnull)data;
/// Adds customs motion error information, <code>enableMotion(enabled: true)</code> must be called before providing data
/// \param data the error to add
///
- (void)addDeviceMotionError:(NSError * _Nonnull)error;
/// Supplies client provided accelerometer data. The <code>CognitionDataGroup.motion</code> data group must be enabled
/// \param data the data to provide
///
- (void)addAccelerometerData:(CMAccelerometerData * _Nonnull)data;
/// Supplies client provided accelerometer errors. The <code>CognitionDataGroup.motion</code> data group must be enabled
/// \param error the error to add
///
- (void)addAccelerometerError:(NSError * _Nonnull)error;
/// Supplies client provided gryo data. The <code>CognitionDataGroup.motion</code> data group must be enabled
/// \param data the data to add
///
- (void)addGyroData:(CMGyroData * _Nonnull)data;
/// Supplies client provided gyro errors. The <code>CognitionDataGroup.motion</code> data group must be enabled
/// \param error the error to add
///
- (void)addGyroError:(NSError * _Nonnull)error;
/// Supplies client provided magnetometer data. The <code>CognitionDataGroup.motion</code> data group must be enabled
/// \param data the data to add
///
- (void)addMagnetometerData:(CMMagnetometerData * _Nonnull)data;
/// Supplies client provided magnetometer errors. The <code>CognitionDataGroup.motion</code> data group must be enabled
/// \param error the error to add
///
- (void)addMagnetometerError:(NSError * _Nonnull)error;
/// Returns the SDK log level
///
/// returns:
/// the set log level
- (enum CognitionLogLevel)getLogLevel SWIFT_WARN_UNUSED_RESULT;
/// Sets the SDK log level
/// \param minLogLevel the log level to set
///
- (void)setLogLevelWithMinLogLevel:(enum CognitionLogLevel)minLogLevel;
/// Set an optional callback for processing log messages. The callback method will be called on a background thread for each logged message.
- (void)setLogCallbackWithCallback:(void (^ _Nullable)(NSString * _Nonnull))callback;
/// Attaches the location data to the next payload
/// \param locations the locations to add
///
- (void)addLocations:(NSArray<CLLocation *> * _Nonnull)locations;
/// Attaches the heading data to the next payload
/// \param heading the headings to add
///
- (void)addHeading:(CLHeading * _Nonnull)heading;
/// Attaches the visit data to the next payload
/// \param visit the visits to add
///
- (void)addVisit:(CLVisit * _Nonnull)visit;
/// Set an optional number of decimal places to round the location coordinates as a means to control location precision
/// \param deciamlPlaces the maxiim number of decimal places to report. Setting -1 will send with default precision
///
@property (nonatomic) NSInteger locationPrecisionDecimalPlaces;
/// Adds a page view by UIViewController reference
/// \param viewController the view controller to add
///
/// \param metadata custom information to provided about the page view
///
- (void)addPageViewWithViewController:(UIViewController * _Nonnull)viewController metadata:(NSDictionary<NSString *, id> * _Nullable)metadata;
/// Adds a page view by name
/// \param viewControllerName the view controller name to add
///
/// \param metadata custom information to provide about the page view
///
- (void)addPageViewWithViewControllerName:(NSString * _Nonnull)viewControllerName metadata:(NSDictionary<NSString *, id> * _Nullable)metadata;
/// Adds an intent group
/// \param value the value to add
///
/// \param metadata custom information to provide about intent group
///
- (void)addIntentGroupWithValue:(NSString * _Nonnull)value metadata:(NSDictionary<NSString *, id> * _Nullable)metadata;
/// Adds a search event
/// \param value The search value to add
///
/// \param metadata custom information to provide about the search event
///
- (void)addSearchWithValue:(NSString * _Nonnull)value metadata:(NSDictionary<NSString *, id> * _Nullable)metadata;
/// Adds a object event
/// \param value the object to add
///
/// \param metadata custom information to provide about the object event
///
- (void)addObjectViewWithValue:(NSString * _Nonnull)value metadata:(NSDictionary<NSString *, id> * _Nullable)metadata;
/// Adds custom data
/// \param metadata the custom data
///
- (void)addCustomDataWithMetadata:(NSDictionary<NSString *, id> * _Nullable)metadata;
/// Registers a user name text field
/// \param textField the text field to register
///
- (void)registerUserNameTextField:(UITextField * _Nonnull)textField;
/// Registers a password text field
/// \param textField the text field to register
///
- (void)registerPasswordTextField:(UITextField * _Nonnull)textField;
/// Ensures biometrics are saved prior to submitting a decision event. This is not required.
/// \param completion a callback executed once  the data is sent
///
- (void)uploadBiometricsWithCompletion:(void (^ _Nullable)(NSError * _Nullable))completion;
@end

/// A data group specifies a set of data to be collected by the SDK
typedef SWIFT_ENUM(NSInteger, CognitionDataGroup, open) {
/// collects device information, such as model
  CognitionDataGroupDevice = 0,
/// collects app information, such as app name
  CognitionDataGroupBundle = 1,
/// collects network information, such as carrier name
  CognitionDataGroupNetwork = 2,
/// collects system information, such as cpu count
  CognitionDataGroupSys = 3,
/// collects relative altimeter information
  CognitionDataGroupAltimeter = 4,
/// collects moton information
  CognitionDataGroupMotion = 5,
/// collects location information
  CognitionDataGroupLocation = 6,
/// collects batter information,
/// <code> UIDevice.current.isBatteryMonitoringEnabled = true</code> must be called before staring the SDK
  CognitionDataGroupBattery = 7,
};

/// The log level of cognition logger
typedef SWIFT_ENUM(NSInteger, CognitionLogLevel, open) {
/// No logs are emitted
  CognitionLogLevelNone = 0,
/// Only error messages are emitted
  CognitionLogLevelError = 1,
/// Only warning and error messages are emitted
  CognitionLogLevelWarning = 2,
/// Only info, warning, and error messages are emitted
  CognitionLogLevelInfo = 3,
/// Only debug, info, warning, and error messages are emitted
  CognitionLogLevelDebug = 4,
/// All logs are emitted
  CognitionLogLevelVerbose = 5,
};

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#elif defined(__x86_64__) && __x86_64__
// Generated by Apple Swift version 5.3.2 (swiftlang-1200.0.45 clang-1200.0.32.28)
#ifndef COGNITIONSDK_SWIFT_H
#define COGNITIONSDK_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import ObjectiveC;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="CognitionSDK",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

enum CognitionDataGroup : NSInteger;
@class CMDeviceMotion;
@class CMAccelerometerData;
@class CMGyroData;
@class CMMagnetometerData;
enum CognitionLogLevel : NSInteger;
@class CLLocation;
@class CLHeading;
@class CLVisit;
@class UIViewController;
@class UITextField;

/// This class represents the SDK, use <code>Cognition.shared</code> to get a reference
SWIFT_CLASS("_TtC12CognitionSDK9Cognition")
@interface Cognition : NSObject
/// Returns a shared reference the CognitionSDK
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) Cognition * _Nonnull shared;)
+ (Cognition * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// Returns the session id
@property (nonatomic, readonly, copy) NSString * _Nonnull sessionId;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// Starts the SDK
///
/// returns:
/// true if the SDK started successfully
- (BOOL)start SWIFT_WARN_UNUSED_RESULT;
/// Stops the SDK
- (void)stop;
/// Resets the sessionId that is generated by the SDK. This should be used if a user logs out of the app
- (void)resetSession;
/// Used to automatically run all monitoring and submits all collected data, this should be used before submitting login/transaction/open to your own servers
/// \param callback a callback execute once analyze is complete
///
- (void)analyze:(void (^ _Nonnull)(void))callback;
/// Sets the API Key
/// \param apiKey An API key to use
///
- (void)setApiKey:(NSString * _Nonnull)apiKey;
/// Updates the eventId at any given time to meet your logical requirements
/// \param eventId the eventId to set
///
- (void)setEventId:(NSString * _Nonnull)eventId;
/// Updates the user id, such as after the user has logged in
/// \param userId the user id to set
///
- (void)setUserId:(NSString * _Nonnull)userId;
/// Updates the device url
/// \param url the url to set
///
- (void)setDeviceUrl:(NSString * _Nonnull)url;
/// Updates the behavior URL
/// \param url the url to update
///
- (void)setBehaviorUrl:(NSString * _Nonnull)url;
/// Returns the flush frequency
///
/// returns:
/// how frequently data is flushed
- (NSTimeInterval)getRequestInterval SWIFT_WARN_UNUSED_RESULT;
/// Sets how frequently data should be flushed to server
/// \param interval the time interval for the flush
///
- (void)setRequestInterval:(NSTimeInterval)interval;
/// Adds a data group to the enabled set. This should be called before <code>start()</code>
/// \param dataGroup the data group to enabled
///
- (void)includeDataGroupWithDataGroup:(enum CognitionDataGroup)dataGroup;
/// Removes a data group to the enabled set. This should be called before <code>start()</code>
/// \param dataGroup the data group to remove
///
- (void)excludeDataGroupWithDataGroup:(enum CognitionDataGroup)dataGroup;
/// Enables or disables debug mode
/// \param enabled When true, additional information is generated in the request body for debugging purposes. Defaults to false
///
- (void)enableDebugModeWithEnabled:(BOOL)enabled;
/// Manually enable or disable the altimeter.
/// \param enabled true if the altimer is enabled
///
- (void)enableAltimeterWithEnabled:(BOOL)enabled;
/// Returns the current accelerometer update interval (defaults to 5 seconds)
///
/// returns:
/// the interval
- (NSTimeInterval)getAcclerometerUpdateInterval SWIFT_WARN_UNUSED_RESULT;
/// Changes the accelerometer update interval. Set this before calling <code>start()</code>
/// \param interval the interval to set
///
- (void)setAccelerometerUpdateInterval:(NSTimeInterval)interval;
/// Returns the current gyro update interval (defaults to 5 seconds)
///
/// returns:
/// the interval
- (NSTimeInterval)getGyroUpdateInterval SWIFT_WARN_UNUSED_RESULT;
/// Changes the gyroscope update interval. Set this before calling <code>start()</code>
/// \param interval the interval to set
///
- (void)setGyroUpdateInterval:(NSTimeInterval)interval;
/// Returns the current magnetometer update interval (defaults to 5 seconds)
///
/// returns:
/// the interval
- (NSTimeInterval)getMagnetometerUpdateInterval SWIFT_WARN_UNUSED_RESULT;
/// Changes the magnetometer update interval. Set this before calling <code>start()</code>
///
/// returns:
/// the interval to set
- (void)setMagnetometerUpdateInterval:(NSTimeInterval)interval;
/// Returns the current device motion update interval (defaults to 5 seconds)
///
/// returns:
/// the interval
- (NSTimeInterval)getDeviceMotionUpdateInterval SWIFT_WARN_UNUSED_RESULT;
/// Changes the device motion update interval. Set this before calling <code>start()</code>
/// \param interval the interval to set
///
- (void)setDeviceMotionUpdateInterval:(NSTimeInterval)interval;
/// Manually enables or disables the motion manager
/// \param enabled if true, then enabled
///
- (void)enableMotionWithEnabled:(BOOL)enabled;
/// Allows for the client to provide motion information
/// \param enabled if true, the client may provide informarion
///
- (void)enableCustomMotionWithEnabled:(BOOL)enabled;
/// Adds customs motion information, <code>enableMotion(enabled: true)</code> must be called before providing data
/// \param data the motion data to add
///
- (void)addDeviceMotionData:(CMDeviceMotion * _Nonnull)data;
/// Adds customs motion error information, <code>enableMotion(enabled: true)</code> must be called before providing data
/// \param data the error to add
///
- (void)addDeviceMotionError:(NSError * _Nonnull)error;
/// Supplies client provided accelerometer data. The <code>CognitionDataGroup.motion</code> data group must be enabled
/// \param data the data to provide
///
- (void)addAccelerometerData:(CMAccelerometerData * _Nonnull)data;
/// Supplies client provided accelerometer errors. The <code>CognitionDataGroup.motion</code> data group must be enabled
/// \param error the error to add
///
- (void)addAccelerometerError:(NSError * _Nonnull)error;
/// Supplies client provided gryo data. The <code>CognitionDataGroup.motion</code> data group must be enabled
/// \param data the data to add
///
- (void)addGyroData:(CMGyroData * _Nonnull)data;
/// Supplies client provided gyro errors. The <code>CognitionDataGroup.motion</code> data group must be enabled
/// \param error the error to add
///
- (void)addGyroError:(NSError * _Nonnull)error;
/// Supplies client provided magnetometer data. The <code>CognitionDataGroup.motion</code> data group must be enabled
/// \param data the data to add
///
- (void)addMagnetometerData:(CMMagnetometerData * _Nonnull)data;
/// Supplies client provided magnetometer errors. The <code>CognitionDataGroup.motion</code> data group must be enabled
/// \param error the error to add
///
- (void)addMagnetometerError:(NSError * _Nonnull)error;
/// Returns the SDK log level
///
/// returns:
/// the set log level
- (enum CognitionLogLevel)getLogLevel SWIFT_WARN_UNUSED_RESULT;
/// Sets the SDK log level
/// \param minLogLevel the log level to set
///
- (void)setLogLevelWithMinLogLevel:(enum CognitionLogLevel)minLogLevel;
/// Set an optional callback for processing log messages. The callback method will be called on a background thread for each logged message.
- (void)setLogCallbackWithCallback:(void (^ _Nullable)(NSString * _Nonnull))callback;
/// Attaches the location data to the next payload
/// \param locations the locations to add
///
- (void)addLocations:(NSArray<CLLocation *> * _Nonnull)locations;
/// Attaches the heading data to the next payload
/// \param heading the headings to add
///
- (void)addHeading:(CLHeading * _Nonnull)heading;
/// Attaches the visit data to the next payload
/// \param visit the visits to add
///
- (void)addVisit:(CLVisit * _Nonnull)visit;
/// Set an optional number of decimal places to round the location coordinates as a means to control location precision
/// \param deciamlPlaces the maxiim number of decimal places to report. Setting -1 will send with default precision
///
@property (nonatomic) NSInteger locationPrecisionDecimalPlaces;
/// Adds a page view by UIViewController reference
/// \param viewController the view controller to add
///
/// \param metadata custom information to provided about the page view
///
- (void)addPageViewWithViewController:(UIViewController * _Nonnull)viewController metadata:(NSDictionary<NSString *, id> * _Nullable)metadata;
/// Adds a page view by name
/// \param viewControllerName the view controller name to add
///
/// \param metadata custom information to provide about the page view
///
- (void)addPageViewWithViewControllerName:(NSString * _Nonnull)viewControllerName metadata:(NSDictionary<NSString *, id> * _Nullable)metadata;
/// Adds an intent group
/// \param value the value to add
///
/// \param metadata custom information to provide about intent group
///
- (void)addIntentGroupWithValue:(NSString * _Nonnull)value metadata:(NSDictionary<NSString *, id> * _Nullable)metadata;
/// Adds a search event
/// \param value The search value to add
///
/// \param metadata custom information to provide about the search event
///
- (void)addSearchWithValue:(NSString * _Nonnull)value metadata:(NSDictionary<NSString *, id> * _Nullable)metadata;
/// Adds a object event
/// \param value the object to add
///
/// \param metadata custom information to provide about the object event
///
- (void)addObjectViewWithValue:(NSString * _Nonnull)value metadata:(NSDictionary<NSString *, id> * _Nullable)metadata;
/// Adds custom data
/// \param metadata the custom data
///
- (void)addCustomDataWithMetadata:(NSDictionary<NSString *, id> * _Nullable)metadata;
/// Registers a user name text field
/// \param textField the text field to register
///
- (void)registerUserNameTextField:(UITextField * _Nonnull)textField;
/// Registers a password text field
/// \param textField the text field to register
///
- (void)registerPasswordTextField:(UITextField * _Nonnull)textField;
/// Ensures biometrics are saved prior to submitting a decision event. This is not required.
/// \param completion a callback executed once  the data is sent
///
- (void)uploadBiometricsWithCompletion:(void (^ _Nullable)(NSError * _Nullable))completion;
@end

/// A data group specifies a set of data to be collected by the SDK
typedef SWIFT_ENUM(NSInteger, CognitionDataGroup, open) {
/// collects device information, such as model
  CognitionDataGroupDevice = 0,
/// collects app information, such as app name
  CognitionDataGroupBundle = 1,
/// collects network information, such as carrier name
  CognitionDataGroupNetwork = 2,
/// collects system information, such as cpu count
  CognitionDataGroupSys = 3,
/// collects relative altimeter information
  CognitionDataGroupAltimeter = 4,
/// collects moton information
  CognitionDataGroupMotion = 5,
/// collects location information
  CognitionDataGroupLocation = 6,
/// collects batter information,
/// <code> UIDevice.current.isBatteryMonitoringEnabled = true</code> must be called before staring the SDK
  CognitionDataGroupBattery = 7,
};

/// The log level of cognition logger
typedef SWIFT_ENUM(NSInteger, CognitionLogLevel, open) {
/// No logs are emitted
  CognitionLogLevelNone = 0,
/// Only error messages are emitted
  CognitionLogLevelError = 1,
/// Only warning and error messages are emitted
  CognitionLogLevelWarning = 2,
/// Only info, warning, and error messages are emitted
  CognitionLogLevelInfo = 3,
/// Only debug, info, warning, and error messages are emitted
  CognitionLogLevelDebug = 4,
/// All logs are emitted
  CognitionLogLevelVerbose = 5,
};

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#endif
