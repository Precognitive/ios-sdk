// Generated by Apple Swift version 5.3.2 (swiftlang-1200.0.45 clang-1200.0.32.28)
#ifndef COGNITIONSDK_SWIFT_H
#define COGNITIONSDK_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import ObjectiveC;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="CognitionSDK",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

enum CognitionDataGroup : NSInteger;
@class CMDeviceMotion;
@class CMAccelerometerData;
@class CMGyroData;
@class CMMagnetometerData;
enum CognitionLogLevel : NSInteger;
@class CLLocation;
@class CLHeading;
@class CLVisit;
@class UIViewController;
@class UITextField;

SWIFT_CLASS("_TtC12CognitionSDK9Cognition")
@interface Cognition : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull SDK_VERSION;)
+ (NSString * _Nonnull)SDK_VERSION SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) Cognition * _Nonnull shared;)
+ (Cognition * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, copy) NSString * _Nonnull sessionId;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// dataGroups should be assigned before calling start. Changing dataGroups after calling start may result in undefined behavior.
/// The pollingInterval can be overridden by calling setPollingInterval. If you change this value while things are running, it will take effect once the current interval completes.
- (BOOL)start SWIFT_WARN_UNUSED_RESULT;
- (void)analyze:(void (^ _Nonnull)(void))callback;
- (void)stop;
- (NSDictionary<NSString *, id> * _Nonnull)buildRequestBody SWIFT_WARN_UNUSED_RESULT;
- (void)setApiKey:(NSString * _Nonnull)apiKey;
- (void)setEventId:(NSString * _Nonnull)eventId;
- (void)setUserId:(NSString * _Nonnull)userId;
- (void)setDeviceUrl:(NSString * _Nonnull)url;
- (void)setBehaviorUrl:(NSString * _Nonnull)url;
- (void)resetSession;
/// Returns the current request interval.
- (NSTimeInterval)getRequestInterval SWIFT_WARN_UNUSED_RESULT;
/// How often should requests be sent to the server
- (void)setRequestInterval:(NSTimeInterval)interval;
/// includeDataGroup should be called prior to calling start().
- (void)includeDataGroupWithDataGroup:(enum CognitionDataGroup)dataGroup;
/// excludeDataGroup should be called prior to calling start().
- (void)excludeDataGroupWithDataGroup:(enum CognitionDataGroup)dataGroup;
/// When true, additional information is generated in the request body for debugging purposes. Defaults to false.
- (void)enableDebugModeWithEnabled:(BOOL)enabled;
/// Manually enable or disable the altimeter.
- (void)enableAltimeterWithEnabled:(BOOL)enabled;
/// Returns the current accelerometer update interval.
- (NSTimeInterval)getAcclerometerUpdateInterval SWIFT_WARN_UNUSED_RESULT;
/// Changes the accelerometer update interval. Set this before calling start().
- (void)setAccelerometerUpdateInterval:(NSTimeInterval)interval;
/// Returns the current gyroscope update interval.
- (NSTimeInterval)getGyroUpdateInterval SWIFT_WARN_UNUSED_RESULT;
/// Changes the gyroscope update interval. Set this before calling start().
- (void)setGyroUpdateInterval:(NSTimeInterval)interval;
/// Returns the current magnetometer update interval.
- (NSTimeInterval)getMagnetometerUpdateInterval SWIFT_WARN_UNUSED_RESULT;
/// Changes the magnetometer update interval. Set this before calling start().
- (void)setMagnetometerUpdateInterval:(NSTimeInterval)interval;
/// Returns the current device motion update interval. Set this before calling start().
- (NSTimeInterval)getDeviceMotionUpdateInterval SWIFT_WARN_UNUSED_RESULT;
/// Changes the device motion update interval. Set this before calling start().
- (void)setDeviceMotionUpdateInterval:(NSTimeInterval)interval;
/// Manually enable or disable the motion manager.
- (void)enableMotionWithEnabled:(BOOL)enabled;
/// true if your app uses a CMMotionManager. Defaults to false.
- (void)enableCustomMotionWithEnabled:(BOOL)enabled;
/// When custom motion is true, supply the device motion via this method.
- (void)addDeviceMotionData:(CMDeviceMotion * _Nonnull)data;
/// When custom motion is true, supply any device motion errors via this method.
- (void)addDeviceMotionError:(NSError * _Nonnull)error;
/// When custom motion is true, supply the accelerometer data via this method.
- (void)addAccelerometerData:(CMAccelerometerData * _Nonnull)data;
/// When custom motion is true, supply any accelerometer errors via this method.
- (void)addAccelerometerError:(NSError * _Nonnull)error;
/// When custom motion is true, supply the gyro data via this method.
- (void)addGyroData:(CMGyroData * _Nonnull)data;
/// When custom motion is true, supply any gyro errors via this method.
- (void)addGyroError:(NSError * _Nonnull)error;
/// When custom motion is true, supply the magnetometer data via this method.
- (void)addMagnetometerData:(CMMagnetometerData * _Nonnull)data;
/// When custom motion is true, supply any magnetometer errors via this method.
- (void)addMagnetometerError:(NSError * _Nonnull)error;
- (enum CognitionLogLevel)getLogLevel SWIFT_WARN_UNUSED_RESULT;
/// Enables logging of messages to the console. Defaults to none.
- (void)setLogLevelWithMinLogLevel:(enum CognitionLogLevel)minLogLevel;
/// Set an optional callback for processing log messages. The callback method will be called on a background thread for each logged message.
- (void)setLogCallbackWithCallback:(void (^ _Nullable)(NSString * _Nonnull))callback;
- (void)addLocations:(NSArray<CLLocation *> * _Nonnull)locations;
- (void)addHeading:(CLHeading * _Nonnull)heading;
- (void)addVisit:(CLVisit * _Nonnull)visit;
- (void)addPageViewWithViewController:(UIViewController * _Nonnull)viewController metadata:(NSDictionary<NSString *, id> * _Nullable)metadata;
- (void)addPageViewWithViewControllerName:(NSString * _Nonnull)viewControllerName metadata:(NSDictionary<NSString *, id> * _Nullable)metadata;
- (void)addIntentGroupWithValue:(NSString * _Nonnull)value metadata:(NSDictionary<NSString *, id> * _Nullable)metadata;
- (void)addSearchWithValue:(NSString * _Nonnull)value metadata:(NSDictionary<NSString *, id> * _Nullable)metadata;
- (void)addObjectViewWithValue:(NSString * _Nonnull)value metadata:(NSDictionary<NSString *, id> * _Nullable)metadata;
- (void)addCustomDataWithMetadata:(NSDictionary<NSString *, id> * _Nullable)metadata;
- (void)registerUserNameTextField:(UITextField * _Nonnull)textField;
- (void)registerPasswordTextField:(UITextField * _Nonnull)textField;
- (NSDictionary<NSString *, id> * _Nonnull)buildBiometricBody SWIFT_WARN_UNUSED_RESULT;
- (void)uploadBiometricsWithCompletion:(void (^ _Nullable)(NSError * _Nullable))completion;
@end

typedef SWIFT_ENUM(NSInteger, CognitionDataGroup, open) {
  CognitionDataGroupDevice = 0,
  CognitionDataGroupBundle = 1,
  CognitionDataGroupNetwork = 2,
  CognitionDataGroupSys = 3,
  CognitionDataGroupAltimeter = 4,
  CognitionDataGroupMotion = 5,
  CognitionDataGroupLocation = 6,
  CognitionDataGroupBattery = 7,
};

typedef SWIFT_ENUM(NSInteger, CognitionLogLevel, open) {
  CognitionLogLevelNone = 0,
  CognitionLogLevelError = 1,
  CognitionLogLevelWarning = 2,
  CognitionLogLevelInfo = 3,
  CognitionLogLevelDebug = 4,
  CognitionLogLevelVerbose = 5,
};

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif
